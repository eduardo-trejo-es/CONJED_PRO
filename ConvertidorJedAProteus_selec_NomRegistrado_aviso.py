# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Convertidor_JEDEC_HIM.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtGui import QIcon

import time


from PyQt5.QtCore import QThread


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        #MainWindow.resize(474, 248)
        MainWindow.setFixedSize(474, 248)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.BtnComenzar = QtWidgets.QPushButton(self.centralwidget)
        self.BtnComenzar.setGeometry(QtCore.QRect(300, 120, 161, 41))
        self.BtnComenzar.setObjectName("BtnComenzar")
        self.lineEditArchivo = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditArchivo.setGeometry(QtCore.QRect(20, 30, 271, 21))
        self.lineEditArchivo.setObjectName("lineEditArchivo")
        self.BtnSelecArchivo = QtWidgets.QPushButton(self.centralwidget)
        self.BtnSelecArchivo.setGeometry(QtCore.QRect(300, 30, 161, 32))
        self.BtnSelecArchivo.setObjectName("BtnSelecArchivo")
        self.lineEditUbicacion = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditUbicacion.setGeometry(QtCore.QRect(20, 80, 271, 21))
        self.lineEditUbicacion.setObjectName("lineEditUbicacion")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 60, 131, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 10, 131, 16))
        self.label_2.setObjectName("label_2")
        self.BtnSelecUbicacion = QtWidgets.QPushButton(self.centralwidget)
        self.BtnSelecUbicacion.setGeometry(QtCore.QRect(300, 80, 161, 32))
        self.BtnSelecUbicacion.setObjectName("BtnSelecUbicacion")
        self.lineEditNombreArchivo = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditNombreArchivo.setGeometry(QtCore.QRect(20, 130, 271, 21))
        self.lineEditNombreArchivo.setObjectName("lineEditNombreArchivo")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 110, 161, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(340, 170, 121, 20))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(130, 166, 151, 20))
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 474, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        
        #Comienza con el boton bloqueado
        self.BtnComenzar.setEnabled(False)
        
        #Cliks de botones
        self.BtnSelecArchivo.clicked.connect(self.openFileNameDialog)
        self.BtnSelecUbicacion.clicked.connect(self.SelecUbicacion)
        self.BtnComenzar.clicked.connect(self.InciarConversion)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Adaptador de .jed para Proteus"))
        self.BtnComenzar.setText(_translate("MainWindow", "Comenzar"))
        self.BtnSelecArchivo.setText(_translate("MainWindow", "Seleccionar archivo"))
        self.label.setText(_translate("MainWindow", "Ubicación a guardar"))
        self.label_2.setText(_translate("MainWindow", "Archivo a convertir"))
        self.BtnSelecUbicacion.setText(_translate("MainWindow", "Seleccionar ubicación"))
        self.label_3.setText(_translate("MainWindow", "Nombre de nuevo archivo"))
        self.label_4.setText(_translate("MainWindow", "Por: Alfredo TREJO"))
        
   
    def openFileNameDialog(self):
        self.lineEditArchivo.setText("")
        filename = QFileDialog.getOpenFileName()
        path = filename[0]
        print(path)
        self.lineEditArchivo.setText(path)
        #Verificar constantemente si ya estan llenos los txtBoxs
        while True:
                    # Dejar que Qt procese sus eventos para que la
                    # ventana siga respondiendo.
                    #Para procesar en paralelo otras cosas
                    QCoreApplication.processEvents()
                    self.label_5.setText("")
                    if(self.lineEditArchivo.text()!="" and self.lineEditUbicacion.text()!="" and self.lineEditNombreArchivo.text()!=""):
                        self.BtnComenzar.setEnabled(True)
                        break
                    #sercano a multitask, realmente esta en el whil.e pero tambien ejecuta todo lo demas
                    
         
    def SelecUbicacion(self):
        self.lineEditUbicacion.setText("")
        directorio = str(QFileDialog.getExistingDirectory(None, "Seleccionar ubicación"))
        #print("Este es el directorio: "+directorio)
        self.lineEditUbicacion.setText(directorio)
        #Verificar constantemente si ya estan llenos los txtBoxs
        while True:
                    self.label_5.setText("")
                    # Dejar que Qt procese sus eventos para que la
                    # ventana siga respondiendo.
                    if(self.lineEditArchivo.text()!="" and self.lineEditUbicacion.text()!="" and self.lineEditNombreArchivo.text()!=""):
                        self.BtnComenzar.setEnabled(True)
                        break
                    #sercano a multitask, realmente esta en el whil.e pero tambien ejecuta todo lo demas
                    QCoreApplication.processEvents()#Para procesar en paralelo otras cosas
 
    
    def InciarConversion(self): 
        self.BtnComenzar.setEnabled(False)
        #Tomar ubicaciones del textbox
        ArchivoAedit=self.lineEditArchivo.text()
        UbicacionNuevoArchivo=self.lineEditUbicacion.text()
        NombreArchivo=self.lineEditNombreArchivo.text()

        Ubi_NombreAr_jed=UbicacionNuevoArchivo+"/"+NombreArchivo+".jed"
        try:
            #Leemos el archivo .jed a convertir
            I = open (ArchivoAedit,'r')
            Jed_A_Converitir = I.read()
            #print(mensaje)
            I.close()
            while True:
                    # Dejar que Qt procese sus eventos para que la
                    # ventana siga respondiendo     
                    #sercano a multitask, realmente esta en el whil.e pero tambien ejecuta todo lo demas
                    QCoreApplication.processEvents()#Para procesar en paralelo otras cosas
                    self.label_5.setText("Archivo origen correcto")
                    break  
        except:
            while True:
                    # Dejar que Qt procese sus eventos para que la
                    # ventana siga respondiendo     
                    #sercano a multitask, realmente esta en el whil.e pero tambien ejecuta todo lo demas
                    QCoreApplication.processEvents()#Para procesar en paralelo otras cosas
                    self.label_5.setText("error archivo origen")
                    break  
        

        ################################
        #   Ajustamos .jed de origen   # 
        ################################

        #Obtenemos inicio de jed que no sera editado
        y=0
        Inicio_jed=""
        for x in Jed_A_Converitir:
            Inicio_jed=Inicio_jed+x
            if (y==(Jed_A_Converitir.find("NOTE NODES *")+11)):
                y=0
                break
            y=y+1

        #Obtenemos parte de jed que sera modificado
        segunda_parte_jed=""
        for x in Jed_A_Converitir:
            if (y>(Jed_A_Converitir.find("NOTE NODES *")+11)):
                segunda_parte_jed=segunda_parte_jed+x

            if (y==len(Jed_A_Converitir)-50):
                break
            y=y+1

        #Tercera parte 
        tercera_parte_jed=""
        y=0
        for x in Jed_A_Converitir:
            if (y >= (len(Jed_A_Converitir)-48)):
                tercera_parte_jed=tercera_parte_jed+x 
            y=y+1

        #Modificamos segunda parte
        #Eliminar saltos de linea 
        Seccion_n=""
        Secciones_fin=""
        fin_seccion_n=False
        y=0
        ya_paso_Espacio=False
        Ya_paso_Espacio_Y_asterisco=False
        segunda_parte_lista=""
        for x in segunda_parte_jed:

            if(Ya_paso_Espacio_Y_asterisco==True):
                Ya_paso_Espacio_Y_asterisco=False
            else:
                Seccion_n=Seccion_n+x

            if (x==" "):
                ya_paso_Espacio=True
            elif(ya_paso_Espacio==True and x!="*"):
                ya_paso_Espacio=False
            elif(ya_paso_Espacio==True and x=="*"):
                Ya_paso_Espacio_Y_asterisco=True

            if (Ya_paso_Espacio_Y_asterisco==True):
                Seccion_n=Seccion_n.replace('\n', '')
                #Dar espacio despues los primeros 6
                e=0
                primeros_seis=""
                el_resto=""
                for i in Seccion_n:#Primeros 6
                    primeros_seis=primeros_seis+i
                    #print(e)
                    if(e>4):
                        break
                    e=e+1
                
                e=0
                for u in Seccion_n:#el resto
                    if(e>5):
                        el_resto=el_resto+u
                    e=e+1
                
                Seccion_n=primeros_seis+" "+el_resto
                #print(Seccion_n)
                segunda_parte_lista=segunda_parte_lista+Seccion_n
                segunda_parte_lista=segunda_parte_lista+'\n'+'\n'
                Seccion_n=""  
            y=y+1
            
        segunda_parte_jed=segunda_parte_lista

        #Jed_A_Converitir = Jed_A_Converitir.replace('\n', ' ').replace('\r', '')

        Jed_A_Convertido=Inicio_jed+"\n"+segunda_parte_jed+tercera_parte_jed
        
        try:
            #Creamos el nuevo .jed convertido
            f = open (Ubi_NombreAr_jed,'w')
            f.write(Jed_A_Convertido)
            f.close()
            while True:
                    # Dejar que Qt procese sus eventos para que la
                    # ventana siga respondiendo     
                    #sercano a multitask, realmente esta en el whil.e pero tambien ejecuta todo lo demas
                    QCoreApplication.processEvents()#Para procesar en paralelo otras cosas
                    self.label_5.setText("Nuevo archivo listo")
                    break  
        except:
            while True:
                    # Dejar que Qt procese sus eventos para que la
                    # ventana siga respondiendo     
                    #sercano a multitask, realmente esta en el whil.e pero tambien ejecuta todo lo demas
                    QCoreApplication.processEvents()#Para procesar en paralelo otras cosas
                    self.label_5.setText("Error, reintentar")
                    break
           
        
        
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    
